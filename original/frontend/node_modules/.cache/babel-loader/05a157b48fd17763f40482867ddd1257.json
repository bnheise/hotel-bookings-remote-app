{"ast":null,"code":"import * as actions from '../constants/UserConstants';\nimport { instance as axios } from '../../axios';\nexport const login = user => async dispatch => {\n  try {\n    dispatch({\n      type: actions.USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/login\", user, config);\n    dispatch({\n      type: actions.USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: actions.USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: actions.USER_LOGOUT\n  });\n  localStorage.removeItem(\"userInfo\");\n};\nexport const register = user => async dispatch => {\n  try {\n    dispatch({\n      type: actions.USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/register\", user, config);\n    dispatch({\n      type: actions.USER_REGISTER_SUCCESS\n    });\n    dispatch({\n      type: actions.USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: actions.USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actions.UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(\"/api/users/update\", user, config);\n    dispatch({\n      type: actions.UPDATE_PROFILE_SUCCESS\n    });\n    dispatch({\n      type: actions.USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"no token, no auth\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: actions.UPDATE_PROFILE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updatePassword = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actions.UPDATE_PASSWORD_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(\"/api/users/update/password\", user, config);\n    dispatch({\n      type: actions.UPDATE_PASSWORD_SUCCESS\n    });\n    dispatch({\n      type: actions.USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"no token, no auth\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: actions.UPDATE_PASSWORD_FAIL,\n      payload: message\n    });\n  }\n};\nexport const fetchUsers = currentPage => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actions.FETCH_USERS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/?pageNumber=${currentPage}`, config);\n    dispatch({\n      type: actions.FETCH_USERS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"no token, no auth\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: actions.FETCH_USERS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const deleteUser = userId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actions.DELETE_USER_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/users/${userId}`, config);\n    dispatch({\n      type: actions.DELETE_USER_SUCCESS\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"no token, no auth\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: actions.DELETE_USER_FAIL,\n      payload: message\n    });\n  }\n};\nexport const detailsUser = userId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actions.GET_USER_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${userId}`, config);\n    dispatch({\n      type: actions.GET_USER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"no token, no auth\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: actions.GET_USER_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateUser = (userId, userData) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actions.UPDATE_USER_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.put(`/api/users/${userId}`, userData, config);\n    dispatch({\n      type: actions.UPDATE_USER_SUCCESS\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"no token, no auth\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: actions.UPDATE_USER_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/actions/UserActions.tsx"],"names":["actions","instance","axios","login","user","dispatch","type","USER_LOGIN_REQUEST","config","headers","data","post","USER_LOGIN_SUCCESS","payload","localStorage","setItem","JSON","stringify","error","USER_LOGIN_FAIL","response","message","logout","USER_LOGOUT","removeItem","register","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","updateProfile","getState","UPDATE_PROFILE_REQUEST","userLogin","userInfo","token","put","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAIL","updatePassword","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","fetchUsers","currentPage","FETCH_USERS_REQUEST","get","FETCH_USERS_SUCCESS","FETCH_USERS_FAIL","deleteUser","userId","DELETE_USER_REQUEST","delete","DELETE_USER_SUCCESS","DELETE_USER_FAIL","detailsUser","GET_USER_REQUEST","GET_USER_SUCCESS","GET_USER_FAIL","updateUser","userData","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux';\nimport * as actions from '../constants/UserConstants';\nimport { instance as axios } from '../../axios';\nimport { IUpdatePassword, IUser, IUserLogin, IUserRegister } from '../../interfaces/IUser';\n\nexport const login = (user: IUserLogin) => async (dispatch: Dispatch) => {\n\n    try {\n\n        dispatch({ type: actions.USER_LOGIN_REQUEST });\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n\n        const { data } = await axios.post(\"/api/users/login\", user, config);\n\n        dispatch({ type: actions.USER_LOGIN_SUCCESS, payload: data });\n\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\n\n    } catch (error: any) {\n        dispatch({\n            type: actions.USER_LOGIN_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        });\n    }\n\n}\n\nexport const logout = () => (dispatch: Dispatch) => {\n\n    dispatch({ type: actions.USER_LOGOUT });\n    localStorage.removeItem(\"userInfo\");\n\n}\n\nexport const register = (user: IUserRegister) => async (dispatch: Dispatch) => {\n\n    try {\n\n        dispatch({ type: actions.USER_REGISTER_REQUEST });\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n\n        const { data } = await axios.post(\"/api/users/register\", user, config);\n\n        dispatch({ type: actions.USER_REGISTER_SUCCESS });\n        dispatch({ type: actions.USER_LOGIN_SUCCESS, payload: data });\n\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\n\n    } catch (error: any) {\n        dispatch({\n            type: actions.USER_REGISTER_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        });\n    }\n\n}\n\nexport const updateProfile = (user: {}) => async (dispatch: Dispatch, getState: any) => {\n\n    try {\n\n        dispatch({ type: actions.UPDATE_PROFILE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(\"/api/users/update\", user, config);\n\n        dispatch({ type: actions.UPDATE_PROFILE_SUCCESS });\n        dispatch({ type: actions.USER_LOGIN_SUCCESS, payload: data });\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\n\n    } catch (error: any) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message;\n        if (message === \"no token, no auth\") {\n            dispatch<any>(logout());\n        }\n        dispatch({\n            type: actions.UPDATE_PROFILE_FAIL,\n            payload: message\n        });\n    }\n\n}\n\nexport const updatePassword = (user: IUpdatePassword) => async (dispatch: Dispatch, getState: any) => {\n\n    try {\n\n        dispatch({ type: actions.UPDATE_PASSWORD_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(\"/api/users/update/password\", user, config);\n\n        dispatch({ type: actions.UPDATE_PASSWORD_SUCCESS });\n        dispatch({ type: actions.USER_LOGIN_SUCCESS, payload: data });\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\n\n    } catch (error: any) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message;\n        if (message === \"no token, no auth\") {\n            dispatch<any>(logout());\n        }\n        dispatch({\n            type: actions.UPDATE_PASSWORD_FAIL,\n            payload: message\n        });\n    }\n\n}\n\n\nexport const fetchUsers = (currentPage: number) => async (dispatch: Dispatch, getState: any) => {\n\n    try {\n\n        dispatch({ type: actions.FETCH_USERS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                \"Authorization\": `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/users/?pageNumber=${currentPage}`, config);\n\n        dispatch({ type: actions.FETCH_USERS_SUCCESS, payload: data });\n\n    } catch (error: any) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message;\n        if (message === \"no token, no auth\") {\n            dispatch<any>(logout());\n        }\n        dispatch({\n            type: actions.FETCH_USERS_FAIL,\n            payload: message\n        });\n    }\n\n}\n\nexport const deleteUser = (userId: IUser['_id']) => async (dispatch: Dispatch, getState: any) => {\n\n    try {\n\n        dispatch({ type: actions.DELETE_USER_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                \"Authorization\": `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.delete(`/api/users/${userId}`, config);\n\n        dispatch({ type: actions.DELETE_USER_SUCCESS });\n\n    } catch (error: any) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message;\n        if (message === \"no token, no auth\") {\n            dispatch<any>(logout());\n        }\n        dispatch({\n            type: actions.DELETE_USER_FAIL,\n            payload: message\n        });\n    }\n\n}\n\nexport const detailsUser = (userId: IUser['_id']) => async (dispatch: Dispatch, getState: any) => {\n\n    try {\n\n        dispatch({ type: actions.GET_USER_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                \"Authorization\": `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/users/${userId}`, config);\n\n        dispatch({ type: actions.GET_USER_SUCCESS, payload: data });\n\n    } catch (error: any) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message;\n        if (message === \"no token, no auth\") {\n            dispatch<any>(logout());\n        }\n        dispatch({\n            type: actions.GET_USER_FAIL,\n            payload: message\n        });\n    }\n\n}\n\nexport const updateUser = (userId: IUser['_id'], userData: {}) => async (dispatch: Dispatch, getState: any) => {\n\n    try {\n\n        dispatch({ type: actions.UPDATE_USER_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                \"Authorization\": `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/users/${userId}`, userData, config);\n\n        dispatch({ type: actions.UPDATE_USER_SUCCESS });\n\n    } catch (error: any) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message;\n        if (message === \"no token, no auth\") {\n            dispatch<any>(logout());\n        }\n        dispatch({\n            type: actions.UPDATE_USER_FAIL,\n            payload: message\n        });\n    }\n\n}"]},"metadata":{},"sourceType":"module"}