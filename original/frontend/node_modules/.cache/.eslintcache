[{"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/index.tsx":"1","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/App.tsx":"2","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/store.tsx":"3","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/Header.tsx":"4","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/ProtectedRoute.tsx":"5","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/OnlyAdmin.tsx":"6","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminEditRoomScreen.tsx":"7","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminUsersScreen.tsx":"8","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/LoginScreen.tsx":"9","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminEditUserScreen.tsx":"10","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/MyBookingsScreen.tsx":"11","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminBookingsScreen.tsx":"12","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/HomeScreen.tsx":"13","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminRoomsScreen.tsx":"14","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminCreateRoomScreen.tsx":"15","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/PasswordScreen.tsx":"16","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/ProfileScreen.tsx":"17","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/RoomDetailsScreen.tsx":"18","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/RegisterScreen.tsx":"19","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/reducers/UserReducers.tsx":"20","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/reducers/BookingReducers.tsx":"21","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/reducers/RoomReducers.tsx":"22","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/Loader.tsx":"23","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/Paginate.tsx":"24","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/Message.tsx":"25","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/SearchRooms.tsx":"26","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/RoomCard.tsx":"27","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/FormReview.tsx":"28","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/actions/UserActions.tsx":"29","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/actions/BookingActions.tsx":"30","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/hooks/useAuthStatus.tsx":"31","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/ListReviews.tsx":"32","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/Rating.tsx":"33","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/RoomFeatures.tsx":"34","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/actions/RoomActions.tsx":"35","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/constants/UserConstants.tsx":"36","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/constants/RoomConstants.tsx":"37","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/constants/BookingConstants.tsx":"38","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/axios.tsx":"39"},{"size":398,"mtime":1646026553552,"results":"40","hashOfConfig":"41"},{"size":3127,"mtime":1646026553547,"results":"42","hashOfConfig":"41"},{"size":1805,"mtime":1646026553556,"results":"43","hashOfConfig":"41"},{"size":3037,"mtime":1646026553548,"results":"44","hashOfConfig":"41"},{"size":379,"mtime":1646026553550,"results":"45","hashOfConfig":"41"},{"size":407,"mtime":1646026553550,"results":"46","hashOfConfig":"41"},{"size":16796,"mtime":1646111283486,"results":"47","hashOfConfig":"41"},{"size":3355,"mtime":1646026553558,"results":"48","hashOfConfig":"41"},{"size":2618,"mtime":1646026553558,"results":"49","hashOfConfig":"41"},{"size":4173,"mtime":1646026553557,"results":"50","hashOfConfig":"41"},{"size":1870,"mtime":1646026553559,"results":"51","hashOfConfig":"41"},{"size":3090,"mtime":1646026553556,"results":"52","hashOfConfig":"41"},{"size":2204,"mtime":1646026553558,"results":"53","hashOfConfig":"41"},{"size":3426,"mtime":1646026553557,"results":"54","hashOfConfig":"41"},{"size":13475,"mtime":1646111273302,"results":"55","hashOfConfig":"41"},{"size":3962,"mtime":1646026553559,"results":"56","hashOfConfig":"41"},{"size":4249,"mtime":1646111286771,"results":"57","hashOfConfig":"41"},{"size":10480,"mtime":1646111294172,"results":"58","hashOfConfig":"41"},{"size":4674,"mtime":1646111289935,"results":"59","hashOfConfig":"41"},{"size":4817,"mtime":1646026553555,"results":"60","hashOfConfig":"41"},{"size":3767,"mtime":1646026553555,"results":"61","hashOfConfig":"41"},{"size":3747,"mtime":1646026553555,"results":"62","hashOfConfig":"41"},{"size":294,"mtime":1646026553549,"results":"63","hashOfConfig":"41"},{"size":1131,"mtime":1646026553550,"results":"64","hashOfConfig":"41"},{"size":317,"mtime":1646026553549,"results":"65","hashOfConfig":"41"},{"size":2516,"mtime":1646026553551,"results":"66","hashOfConfig":"41"},{"size":1020,"mtime":1646111934939,"results":"67","hashOfConfig":"41"},{"size":2754,"mtime":1646026553548,"results":"68","hashOfConfig":"41"},{"size":7750,"mtime":1646111241023,"results":"69","hashOfConfig":"41"},{"size":4711,"mtime":1646111199818,"results":"70","hashOfConfig":"41"},{"size":571,"mtime":1646026553552,"results":"71","hashOfConfig":"41"},{"size":586,"mtime":1646026553549,"results":"72","hashOfConfig":"41"},{"size":1395,"mtime":1646026553550,"results":"73","hashOfConfig":"41"},{"size":1756,"mtime":1646026553551,"results":"74","hashOfConfig":"41"},{"size":4598,"mtime":1646111230650,"results":"75","hashOfConfig":"41"},{"size":1470,"mtime":1646026553554,"results":"76","hashOfConfig":"41"},{"size":1223,"mtime":1646026553554,"results":"77","hashOfConfig":"41"},{"size":1290,"mtime":1646026553554,"results":"78","hashOfConfig":"41"},{"size":124,"mtime":1646111163578,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"374nf7",{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"102"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/index.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/App.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/store.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/Header.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/ProtectedRoute.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/OnlyAdmin.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminEditRoomScreen.tsx",["202"],[],"import React, { useState, useEffect } from 'react'\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { getRoomDetails } from '../redux/actions/RoomActions';\nimport { IRoom, TImage } from '../interfaces/IRoom';\nimport { Container, Row, Col, Form, FormGroup, Button, FloatingLabel, Image } from 'react-bootstrap';\nimport { updateRoom } from '../redux/actions/RoomActions';\nimport { instance as axios } from '../axios';\nimport { UPDATE_ROOM_RESET } from '../redux/constants/RoomConstants';\n\n\ntype TId = {\n    id: IRoom['_id']\n}\n\nconst AdminEditRoomScreen = () => {\n\n    const dispatch = useDispatch();\n\n    let navigate = useNavigate();\n    let { id } = useParams<TId>();\n\n    const [name, setName] = useState<IRoom['name']>(\"\");\n    const [description, setDescription] = useState<IRoom['description']>(\"\");\n    const [address, setAddress] = useState<IRoom['address']>(\"\");\n    const [guestCapacity, setGuestCapacity] = useState<IRoom['guestCapacity']>(0);\n    const [numOfBeds, setNumOfBeds] = useState<IRoom['numOfBeds']>(0);\n    const [roomType, setRoomType] = useState<IRoom['category'] | string>(\"King\");\n    const [internet, setInternet] = useState<IRoom['internet']>(false);\n    const [airConditioned, setAirConditioned] = useState<IRoom['airConditioned']>(false);\n    const [breakfast, setBreakfast] = useState<IRoom['breakfast']>(false);\n    const [petsAllowed, setPetsAllowed] = useState<IRoom['petsAllowed']>(false);\n    const [roomCleaning, setRoomCleaning] = useState<IRoom['roomCleaning']>(false);\n    const [price, setPrice] = useState<IRoom['pricePerNight']>(0);\n    const [oldImages, setOldImages] = useState<TImage[]>([]);\n    const [newImages, setNewImages] = useState<any>(null);\n\n    const { loading: loadingUpdate, success: successUpdate, error: errorUpdate } = useSelector((state: RootStateOrAny) => state.roomUpdate);\n\n    const { room, loading, error } = useSelector((state: RootStateOrAny) => state.roomDetails);\n\n    useEffect(() => {\n        if (successUpdate) {\n            dispatch(getRoomDetails(id as string));\n            navigate(\"/admin/rooms\");\n            dispatch({ type: UPDATE_ROOM_RESET });\n        }\n        if (!room?.name || room._id !== id) {\n            dispatch(getRoomDetails(id as string));\n        } else {\n            setName(room.name);\n            setDescription(room.description);\n            setAddress(room.address);\n            setGuestCapacity(room.guestCapacity);\n            setNumOfBeds(room.numOfBeds);\n            setRoomType(room.roomType);\n            setInternet(room.internet);\n            setAirConditioned(room.petsAllowed);\n            setBreakfast(room.breakfast);\n            setPetsAllowed(room.petsAllowed);\n            setRoomCleaning(room.roomCleaning);\n            setPrice(room.pricePerNight);\n            setOldImages(room.images);\n        }\n    }, [dispatch, room, successUpdate, id]);\n\n    const removeImage = (imageId: string) => {\n        const removedImage: any = oldImages.filter((e: TImage) => e._id !== imageId);\n        setOldImages(removedImage);\n    }\n\n    const uploadImagesHandler = (e: React.FormEvent) => {\n\n        const target = e.target as HTMLInputElement;\n\n        if (!target.files?.length) {\n            return;\n        }\n\n        const files = target.files;\n\n        setNewImages(files);\n\n    }\n\n    const handlerSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n\n        for (let i = 0; i < newImages?.length; i++) {\n            formData.append(\"image\", newImages[i]);\n        }\n\n        try {\n\n            const config = {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            }\n\n            const { data } = await axios.post(\"/api/uploads\", formData, config);\n\n            const allImages: TImage[] = oldImages;\n            for (let i = 0; i < data?.length; i++) {\n                allImages.push({ image: `/${data[i].path.toString().replace(\"\\\\\", \"/\")}` });\n            }\n\n            dispatch(updateRoom(id as string, { name, description, address, guestCapacity, numOfBeds, category: roomType, internet, airConditioned, breakfast, petsAllowed, roomCleaning, pricePerNight: price, images: allImages }));\n\n        } catch (error: any) {\n            console.log(error.message);\n        }\n\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={12}>\n                    <h3 className=\"mb-3\">Edit Room</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={12}>\n                    {loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> :\n                        <>\n                            {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n                            <Form onSubmit={handlerSubmit}>\n                                <FormGroup controlId=\"name\">\n                                    <Form.Label>\n                                        Name\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Name\"\n                                        name=\"name\"\n                                        value={name}\n                                        onChange={(e) => setName(e.target.value)}\n                                        required\n                                    />\n                                </FormGroup>\n                                <FormGroup className=\"mt-3 mb-3\">\n                                    <FloatingLabel controlId=\"description\" label=\"Description\">\n                                        <Form.Control\n                                            as=\"textarea\"\n                                            placeholder=\"Description\"\n                                            name=\"description\"\n                                            value={description}\n                                            onChange={(e) => setDescription(e.target.value)}\n                                            style={{ height: '100px' }}\n                                            required\n                                        />\n                                    </FloatingLabel>\n                                </FormGroup>\n                                <FormGroup controlId=\"address\">\n                                    <Form.Label>\n                                        Address\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Address\"\n                                        name=\"address\"\n                                        value={address}\n                                        onChange={(e) => setAddress(e.target.value)}\n                                        required\n                                    />\n                                </FormGroup>\n                                <Row className=\"mt-3 mb-3\">\n                                    <Col md={4} sm={12}>\n                                        <FormGroup controlId=\"guestCapacity\">\n                                            <Form.Label>\n                                                Guest Capacity\n                                            </Form.Label>\n                                            <Form.Select\n                                                name=\"guestCapacity\"\n                                                value={Number(guestCapacity)}\n                                                onChange={(e) => setGuestCapacity(Number(e.target.value))}\n                                                aria-label=\"Default select example\"\n                                            >\n                                                {[1, 2, 3, 4, 5].map((guest: number) =>\n                                                    <option value={guest} key={guest}>{guest}</option>\n                                                )}\n                                            </Form.Select>\n                                        </FormGroup>\n                                    </Col>\n                                    <Col md={4} sm={12}>\n                                        <FormGroup controlId=\"numOfBeds\">\n                                            <Form.Label>\n                                                Num Of Beds\n                                            </Form.Label>\n                                            <Form.Select\n                                                name=\"numOfBeds\"\n                                                value={Number(numOfBeds)}\n                                                onChange={(e) => setNumOfBeds(Number(e.target.value))}\n                                                aria-label=\"Default select example\"\n                                            >\n                                                {[1, 2, 3, 4, 5].map((numOfBeds: number) =>\n                                                    <option value={numOfBeds} key={numOfBeds}>{numOfBeds}</option>\n                                                )}\n                                            </Form.Select>\n                                        </FormGroup>\n                                    </Col>\n                                    <Col md={4} sm={12}>\n                                        <FormGroup controlId=\"roomType\">\n                                            <Form.Label>Room Type</Form.Label>\n                                            <Form.Select\n                                                name=\"roomType\"\n                                                value={roomType}\n                                                onChange={(e) => setRoomType(e.target.value)}\n                                                aria-label=\"Default select example\"\n                                            >\n                                                <option value=\"King\">King</option>\n                                                <option value=\"Single\">Single</option>\n                                                <option value=\"Twins\">Twins</option>\n                                            </Form.Select>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row className=\"mb-3\">\n                                    <Col md={2} sm={12}>\n                                        <Form.Group controlId=\"internet\">\n                                            <Form.Check\n                                                type=\"checkbox\"\n                                                label=\"Internet\"\n                                                checked={internet ? true : false}\n                                                onChange={(e) => setInternet(!internet)}\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col md={2} sm={12}>\n                                        <Form.Group controlId=\"breakfast\">\n                                            <Form.Check\n                                                type=\"checkbox\"\n                                                label=\"Breakfast\"\n                                                checked={breakfast ? true : false}\n                                                onChange={(e) => setBreakfast(!breakfast)}\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col md={2} sm={12}>\n                                        <Form.Group controlId=\"airConditioned\">\n                                            <Form.Check\n                                                type=\"checkbox\"\n                                                label=\"Air Conditioned\"\n                                                checked={airConditioned ? true : false}\n                                                onChange={(e) => setAirConditioned(!airConditioned)}\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col md={2} sm={12}>\n                                        <Form.Group controlId=\"petsAllowed\">\n                                            <Form.Check\n                                                type=\"checkbox\"\n                                                label=\"Pets Allowed\"\n                                                checked={petsAllowed ? true : false}\n                                                onChange={(e) => setPetsAllowed(!petsAllowed)}\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col md={2} sm={12}>\n                                        <Form.Group controlId=\"roomCleaning\">\n                                            <Form.Check\n                                                type=\"checkbox\"\n                                                label=\"Room Cleaning\"\n                                                checked={roomCleaning ? true : false}\n                                                onChange={(e) => setRoomCleaning(!roomCleaning)}\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                                <FormGroup className=\"mb-3\" controlId=\"price\">\n                                    <Form.Label>\n                                        Price\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"number\"\n                                        value={Number(price)}\n                                        onChange={(e) => setPrice(Number(e.target.value))}\n                                        placeholder=\"Price Per Night\"\n                                        min=\"10\"\n                                        max=\"100\"\n                                    />\n                                </FormGroup>\n                                <FormGroup className=\"mb-3\" controlId=\"images\">\n                                    <Form.Label>\n                                        Images\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"file\"\n                                        name=\"images\"\n                                        onChange={uploadImagesHandler}\n                                        multiple\n                                        required={oldImages.length === 0 ? true : false}\n                                    />\n                                </FormGroup>\n                                <div className=\"images-preview mb-4\">\n                                    <Row>\n                                        {oldImages.map((image: TImage) =>\n                                            <Col md={3} key={image._id}>\n                                                <Image src={image.image} alt=\"Image Room\" fluid />\n                                                <Button\n                                                    className=\"mt-2\"\n                                                    onClick={() => removeImage(image._id as string)}\n                                                >\n                                                    Remove Image\n                                                </Button>\n                                            </Col>\n                                        )}\n                                    </Row>\n                                </div>\n                                <FormGroup className=\"mb-4\" >\n                                    <Button type=\"submit\">\n                                        {loadingUpdate ? <Loader /> : `Update`}\n                                    </Button>\n                                </FormGroup>\n                            </Form>\n                        </>\n                    }\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default AdminEditRoomScreen",["203","204"],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminUsersScreen.tsx",["205","206"],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/LoginScreen.tsx",["207"],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminEditUserScreen.tsx",["208"],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/MyBookingsScreen.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminBookingsScreen.tsx",["209","210"],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/HomeScreen.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminRoomsScreen.tsx",["211","212"],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminCreateRoomScreen.tsx",["213"],[],"import React, { useState, useEffect } from 'react';\nimport { Container, Form, Row, Col, FormGroup, FloatingLabel, Button } from 'react-bootstrap';\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\nimport { instance as axios } from '../axios';\nimport { useNavigate } from 'react-router-dom';\nimport { CREATE_ROOM_RESET } from '../redux/constants/RoomConstants';\nimport { createRoom } from '../redux/actions/RoomActions';\nimport { IRoom, TImage } from '../interfaces/IRoom';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\n\nconst AdminCreateRoomScreen = () => {\n\n    let navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const [name, setName] = useState<IRoom['name']>(\"\");\n    const [description, setDescription] = useState<IRoom['description']>(\"\");\n    const [address, setAddress] = useState<IRoom['address']>(\"\");\n    const [guestCapacity, setGuestCapacity] = useState<IRoom['guestCapacity']>(0);\n    const [numOfBeds, setNumOfBeds] = useState<IRoom['numOfBeds']>(0);\n    const [roomType, setRoomType] = useState<IRoom['category'] | string>(\"King\");\n    const [internet, setInternet] = useState<IRoom['internet']>(false);\n    const [airConditioned, setAirConditioned] = useState<IRoom['airConditioned']>(false);\n    const [breakfast, setBreakfast] = useState<IRoom['breakfast']>(false);\n    const [petsAllowed, setPetsAllowed] = useState<IRoom['petsAllowed']>(false);\n    const [roomCleaning, setRoomCleaning] = useState<IRoom['roomCleaning']>(false);\n    const [price, setPrice] = useState<IRoom['pricePerNight']>(0);\n    const [images, setImages] = useState<any>(null);\n\n    const [uploadRoomLoading, setUploadRoomLoading] = useState<boolean>(false);\n\n    const { success, error } = useSelector((state: RootStateOrAny) => state.roomCreate);\n\n    const uploadImagesHandler = (e: React.FormEvent) => {\n\n        const target = e.target as HTMLInputElement;\n\n        if (!target.files?.length) {\n            return;\n        }\n\n        const files = target.files;\n\n        setImages(files);\n\n    }\n\n    const handlerSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n\n        for (let i = 0; i < images.length; i++) {\n            formData.append(\"image\", images[i]);\n        }\n\n        try {\n\n            setUploadRoomLoading(true);\n\n            const config = {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            }\n\n            const { data } = await axios.post(\"/api/uploads\", formData, config);\n\n            const allImages: TImage[] = [];\n            for (let i = 0; i < data.length; i++) {\n                allImages.push({ image: `/${data[i].path.toString().replace(\"\\\\\", \"/\")}` });\n            }\n\n            setTimeout(() => {\n                dispatch(createRoom({ name, description, address, guestCapacity, numOfBeds, category: roomType, internet, airConditioned, breakfast, petsAllowed, roomCleaning, pricePerNight: price, images: allImages }));\n                setUploadRoomLoading(false);\n                dispatch({ type: CREATE_ROOM_RESET });\n            }, 1000);\n\n        } catch (error: any) {\n            console.log(error.message);\n        }\n\n    }\n\n    useEffect(() => {\n        if (success) {\n            navigate(\"/\");\n        }\n    }, [dispatch, success]);\n\n    return (\n        <Container>\n            <Row>\n                <Col md={12}>\n                    <h3 className=\"mb-3\">Create Room</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={12}>\n                    {error && (\n                        <Message variant='danger'>\n                            {error}\n                        </Message>\n                    )}\n                    <Form onSubmit={handlerSubmit}>\n                        <FormGroup controlId=\"name\">\n                            <Form.Label>\n                                Name\n                            </Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Name\"\n                                name=\"name\"\n                                value={name}\n                                onChange={(e) => setName(e.target.value)}\n                                required\n                            />\n                        </FormGroup>\n                        <FormGroup className=\"mt-3 mb-3\">\n                            <FloatingLabel controlId=\"description\" label=\"Description\">\n                                <Form.Control\n                                    as=\"textarea\"\n                                    placeholder=\"Description\"\n                                    name=\"description\"\n                                    value={description}\n                                    onChange={(e) => setDescription(e.target.value)}\n                                    style={{ height: '100px' }}\n                                    required\n                                />\n                            </FloatingLabel>\n                        </FormGroup>\n                        <FormGroup controlId=\"address\">\n                            <Form.Label>\n                                Address\n                            </Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Address\"\n                                name=\"address\"\n                                value={address}\n                                onChange={(e) => setAddress(e.target.value)}\n                                required\n                            />\n                        </FormGroup>\n                        <Row className=\"mt-3 mb-3\">\n                            <Col md={4} sm={12}>\n                                <FormGroup controlId=\"guestCapacity\">\n                                    <Form.Label>\n                                        Guest Capacity\n                                    </Form.Label>\n                                    <Form.Select\n                                        name=\"guestCapacity\"\n                                        value={Number(guestCapacity)}\n                                        onChange={(e) => setGuestCapacity(Number(e.target.value))}\n                                        aria-label=\"Default select example\"\n                                    >\n                                        <option value=\"1\">1</option>\n                                        <option value=\"2\">2</option>\n                                        <option value=\"3\">3</option>\n                                        <option value=\"4\">4</option>\n                                        <option value=\"5\">5</option>\n                                    </Form.Select>\n                                </FormGroup>\n                            </Col>\n                            <Col md={4} sm={12}>\n                                <FormGroup controlId=\"numOfBeds\">\n                                    <Form.Label>\n                                        Num Of Beds\n                                    </Form.Label>\n                                    <Form.Select\n                                        name=\"numOfBeds\"\n                                        value={Number(numOfBeds)}\n                                        onChange={(e) => setNumOfBeds(Number(e.target.value))}\n                                        aria-label=\"Default select example\"\n                                    >\n                                        <option value=\"1\">1</option>\n                                        <option value=\"2\">2</option>\n                                        <option value=\"3\">3</option>\n                                        <option value=\"4\">4</option>\n                                        <option value=\"5\">5</option>\n                                    </Form.Select>\n                                </FormGroup>\n                            </Col>\n                            <Col md={4} sm={12}>\n                                <FormGroup controlId=\"roomType\">\n                                    <Form.Label>Room Type</Form.Label>\n                                    <Form.Select\n                                        name=\"roomType\"\n                                        value={roomType}\n                                        onChange={(e) => setRoomType(e.target.value)}\n                                        aria-label=\"Default select example\"\n                                    >\n                                        <option value=\"King\">King</option>\n                                        <option value=\"Single\">Single</option>\n                                        <option value=\"Twins\">Twins</option>\n                                    </Form.Select>\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <Row className=\"mb-3\">\n                            <Col md={2} sm={12}>\n                                <Form.Group controlId=\"internet\">\n                                    <Form.Check\n                                        type=\"checkbox\"\n                                        label=\"Internet\"\n                                        checked={internet ? true : false}\n                                        onChange={(e) => setInternet(!internet)}\n                                    />\n                                </Form.Group>\n                            </Col>\n                            <Col md={2} sm={12}>\n                                <Form.Group controlId=\"breakfast\">\n                                    <Form.Check\n                                        type=\"checkbox\"\n                                        label=\"Breakfast\"\n                                        checked={breakfast ? true : false}\n                                        onChange={(e) => setBreakfast(!breakfast)}\n                                    />\n                                </Form.Group>\n                            </Col>\n                            <Col md={2} sm={12}>\n                                <Form.Group controlId=\"airConditioned\">\n                                    <Form.Check\n                                        type=\"checkbox\"\n                                        label=\"Air Conditioned\"\n                                        checked={airConditioned ? true : false}\n                                        onChange={(e) => setAirConditioned(!airConditioned)}\n                                    />\n                                </Form.Group>\n                            </Col>\n                            <Col md={2} sm={12}>\n                                <Form.Group controlId=\"petsAllowed\">\n                                    <Form.Check\n                                        type=\"checkbox\"\n                                        label=\"Pets Allowed\"\n                                        checked={petsAllowed ? true : false}\n                                        onChange={(e) => setPetsAllowed(!petsAllowed)}\n                                    />\n                                </Form.Group>\n                            </Col>\n                            <Col md={2} sm={12}>\n                                <Form.Group controlId=\"roomCleaning\">\n                                    <Form.Check\n                                        type=\"checkbox\"\n                                        label=\"Room Cleaning\"\n                                        checked={roomCleaning ? true : false}\n                                        onChange={(e) => setRoomCleaning(!roomCleaning)}\n                                    />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <FormGroup className=\"mb-3\" controlId=\"price\">\n                            <Form.Label>\n                                Price\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                value={Number(price)}\n                                onChange={(e) => setPrice(Number(e.target.value))}\n                                placeholder=\"Price Per Night\"\n                                min=\"10\"\n                                max=\"100\"\n                            />\n                        </FormGroup>\n                        <FormGroup className=\"mb-3\" controlId=\"images\">\n                            <Form.Label>\n                                Images\n                            </Form.Label>\n                            <Form.Control\n                                type=\"file\"\n                                name=\"images\"\n                                onChange={uploadImagesHandler}\n                                multiple\n                                required\n                            />\n                        </FormGroup>\n                        <FormGroup className=\"mb-4\" >\n                            <Button type=\"submit\">\n                                {uploadRoomLoading ? <Loader /> : `Create`}\n                            </Button>\n                        </FormGroup>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default AdminCreateRoomScreen;\n","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/PasswordScreen.tsx",["214"],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/ProfileScreen.tsx",["215"],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/RoomDetailsScreen.tsx",["216","217"],[],"import React, { useState, useEffect } from 'react';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useParams } from 'react-router-dom';\nimport { useSelector, useDispatch, RootStateOrAny } from 'react-redux';\nimport { getRoomDetails } from '../redux/actions/RoomActions';\nimport { IRoom } from '../interfaces/IRoom';\nimport Loader from '../components/Loader';\nimport { Container, Row, Col, Carousel, Button, Card } from 'react-bootstrap';\nimport FormReview from '../components/FormReview';\nimport Message from '../components/Message';\nimport Rating from '../components/Rating';\nimport { checkRoomBooking } from '../redux/actions/BookingActions';\nimport ListReviews from '../components/ListReviews';\nimport RoomFeatures from '../components/RoomFeatures';\nimport { useAuthStatus } from '../hooks/useAuthStatus';\nimport { Link } from 'react-router-dom';\nimport { CHECK_ROOM_BOOKING_RESET, CREATE_BOOKING_RESET } from '../redux/constants/BookingConstants';\nimport { instance as axios } from '../axios';\nimport { PayPalButton } from \"react-paypal-button-v2\";\nimport { createBooking } from '../redux/actions/BookingActions';\nimport { getBookedDates } from '../redux/actions/BookingActions';\nimport { IBooking } from '../interfaces/IBooking';\n\n\ntype TId = {\n    id: IRoom['_id']\n}\n\ndeclare global {\n    interface Window {\n        paypal: any;\n    }\n}\n\nconst RoomDetailsScreen = () => {\n\n    const { loggedIn } = useAuthStatus();\n\n    const [checkInDate, setCheckInDate] = useState<IBooking['checkInDate']>();\n    const [checkOutDate, setCheckOutDate] = useState<IBooking['checkOutDate']>();\n    const [daysOfStay, setDaysOfStay] = useState<IBooking['daysOfStay']>(0);\n\n    const [sdkReady, setSdkReady] = useState<Boolean>(false);\n\n    const { id } = useParams<TId>();\n\n    const dispatch = useDispatch();\n\n    const { loading, room, error } = useSelector((state: RootStateOrAny) => state.roomDetails);\n\n    const { loading: loadingCreateReview, success: successCreateReview, error: errorCreateReview } =\n        useSelector((state: RootStateOrAny) => state.roomCreateReview);\n\n    const { loading: loadingRoomIsAvailable, success: successRoomIsAvailable, error: errorRoomIsAvailable }\n        = useSelector((state: RootStateOrAny) => state.roomBookingCheck);\n\n    const { loading: loadingBookingCreate, success: successBookingCreate, error: errorBookingCreate }\n        = useSelector((state: RootStateOrAny) => state.bookingCreate);\n\n    const { bookedDates } = useSelector((state: RootStateOrAny) => state.bookedDates);\n\n    useEffect(() => {\n\n        const addPaypalScript = async () => {\n            const { data: clientId } = await axios.get(\"/api/config/paypal\");\n            const script = document.createElement(\"script\");\n            script.type = \"text/javascript\";\n            script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\n            script.async = true;\n            script.onload = () => {\n                setSdkReady(true);\n            };\n            document.body.appendChild(script);\n        };\n\n        if (!window.paypal && !successBookingCreate) {\n            addPaypalScript();\n        } else {\n            setSdkReady(true);\n        }\n\n        dispatch(getRoomDetails(id as string));\n        dispatch(getBookedDates(id as string));\n        dispatch({ type: CHECK_ROOM_BOOKING_RESET });\n        dispatch({ type: CREATE_BOOKING_RESET });\n    }, [dispatch, id]);\n\n    const onChange = (dates: any) => {\n        const [checkInDate, checkOutDate] = dates;\n        setCheckInDate(checkInDate as Date);\n        setCheckOutDate(checkOutDate as Date);\n\n        if (checkInDate && checkOutDate) {\n\n            // Calclate days of stay\n\n            const days = Math.abs(checkInDate - checkOutDate) / (1000 * 60 * 60 * 24);\n\n            setDaysOfStay(days);\n\n            dispatch(checkRoomBooking(id as string, checkInDate.toISOString(), checkOutDate.toISOString()));\n\n        }\n\n    }\n\n    const excludedDates: any[] = []\n    bookedDates?.forEach((date: Date) => {\n        excludedDates.push(new Date(date))\n    })\n\n    const successPaymentHandler = (paymentResult: any) => {\n\n        const amountPaid = Number(room.pricePerNight) * Number(daysOfStay);\n\n        const paymentInfo = {\n            id: paymentResult.id,\n            status: paymentResult.status,\n            update_time: paymentResult.update_time,\n            email_address: paymentResult.payer.email_address,\n        }\n\n        const bookingData = {\n            room: id,\n            checkInDate,\n            checkOutDate,\n            amountPaid,\n            paymentInfo,\n            daysOfStay,\n        }\n\n        dispatch(createBooking(bookingData));\n        dispatch(getBookedDates(id as string));\n        dispatch({ type: CHECK_ROOM_BOOKING_RESET });\n        dispatch({ type: CREATE_BOOKING_RESET });\n\n    }\n\n    return (\n        <Container className=\"pb-4\">\n            <Row>\n                {loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n                    <Col>\n                        <h1 className=\"mb-2\">{room.name}</h1>\n                        <span className=\"d-block mb-2\">{room.address}</span>\n                        <Rating reviews={room.ratings} />\n                        <div className=\"carousel-room mt-3 mb-3\">\n                            <Carousel>\n                                {room.images?.map((img: any) =>\n                                    <Carousel.Item key={img._id}>\n                                        <img\n                                            className=\"d-block w-100\"\n                                            src={img.image}\n                                            alt={img._id}\n                                        />\n                                    </Carousel.Item>\n                                )}\n                            </Carousel>\n                        </div>\n                        <Row>\n                            <Col xs={12} sm={12} md={8}>\n                                <h3>Description</h3>\n                                <p>\n                                    {room.description}\n                                </p>\n\n                                <RoomFeatures room={room} />\n\n                                <h4 className=\"mt-3 mb-4\">Reviews</h4>\n\n                                {errorCreateReview && <Message variant=\"danger\">{errorCreateReview}</Message>}\n                                {successCreateReview && <Message variant=\"success\">Added Review</Message>}\n\n                                <FormReview idRoom={room._id} />\n\n                                <hr />\n                                {loadingCreateReview && <Loader />}\n\n                                <ListReviews roomReviews={room.reviews} />\n\n                            </Col>\n                            <Col xs={12} sm={12} md={4}>\n                                <Card className=\"shadow p-3 mb-5 bg-body rounded\">\n                                    <Card.Body>\n                                        <Card.Title>${room.pricePerNight} / Per Night</Card.Title>\n                                        <hr />\n                                        <p className=\"mb-3\">Pick Check In & Check Out Date</p>\n                                        <DatePicker\n                                            dateFormat=\"DD-MM-YYYY\"\n                                            className='w-100'\n                                            selected={checkInDate}\n                                            onChange={onChange}\n                                            startDate={checkInDate}\n                                            endDate={checkOutDate}\n                                            minDate={new Date()}\n                                            excludeDates={excludedDates}\n                                            selectsRange\n                                            inline\n                                        />\n                                        {loadingRoomIsAvailable && <Loader />}\n                                        {successRoomIsAvailable && <Message variant=\"success\">Room Is Available</Message>}\n                                        {errorRoomIsAvailable && <Message variant=\"danger\">{errorRoomIsAvailable}</Message>}\n\n                                        {loggedIn && successRoomIsAvailable && (\n                                            <Button size=\"lg\" variant=\"primary\" className=\"mb-3\">\n                                                Pay ${Number(room.pricePerNight) * Number(daysOfStay)}\n                                            </Button>\n                                        )}\n\n                                        {!sdkReady && <Loader />}\n\n                                        {loggedIn && successRoomIsAvailable && sdkReady && !successBookingCreate && (\n                                            <PayPalButton\n                                                amount={Number(room.pricePerNight) * Number(daysOfStay)}\n                                                onSuccess={successPaymentHandler}\n                                            />\n                                        )}\n\n                                        {!loggedIn && !successRoomIsAvailable && (\n                                            <Message variant=\"info\">\n                                                Please <Link to=\"/login\">Sign In</Link> for booking\n                                            </Message>\n                                        )}\n\n                                        {successBookingCreate && (\n                                            <Message variant=\"success\">\n                                                Your booking has been paymented\n                                            </Message>\n                                        )}\n\n                                        {errorBookingCreate && (\n                                            <Message variant=\"success\">\n                                                {errorBookingCreate}\n                                            </Message>\n                                        )}\n\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Col>\n                )}\n            </Row>\n        </Container>\n    );\n};\n\nexport default RoomDetailsScreen;\n","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/RegisterScreen.tsx",["218"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { instance as axios } from '../axios';\nimport { useSelector, useDispatch, RootStateOrAny } from 'react-redux';\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\nimport { register } from '../redux/actions/UserActions';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { IUser } from '../interfaces/IUser';\n\nconst RegisterScreen: React.FC = () => {\n\n    const dispatch = useDispatch();\n    let navigate = useNavigate();\n\n    const [name, setName] = useState<IUser['name']>(\"\");\n    const [email, setEmail] = useState<IUser['email']>(\"\");\n    const [password, setPassword] = useState<IUser['password']>(\"\");\n    const [avatar, setAvatar] = useState<IUser['avatar']>(\"\");\n\n    const { loading, success, error } = useSelector((state: RootStateOrAny) => state.userRegister);\n    const { userInfo } = useSelector((state: RootStateOrAny) => state.userLogin);\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        dispatch(register({ name, email, password, avatar }));\n    }\n\n    const handleUpload = async (e: React.ChangeEvent) => {\n\n        const target = e.target as HTMLInputElement;\n\n        if (!target.files?.length) {\n            return;\n        }\n\n        const file = target.files[0];\n\n        const formData = new FormData();\n\n        formData.append(\"image\", file);\n\n        try {\n\n            const config = {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            }\n\n            const { data } = await axios.post(\"/api/uploads\", formData, config);\n\n            setAvatar(data[0].path);\n\n        } catch (error: any) {\n            console.log(error.message);\n        }\n\n    }\n\n    useEffect(() => {\n        if (userInfo) {\n            navigate(\"/\");\n        }\n    }, [dispatch, userInfo, success]);\n\n\n    return (\n        <Container>\n            <Row className='justify-content-center'>\n                <Col xs={12} md={6}>\n                    <h2 className=\"mb-4\">Login</h2>\n                    {error && <Message variant=\"danger\">{error}</Message>}\n                    <Form onSubmit={handleSubmit}>\n                        <Form.Group controlId=\"name\" className=\"mb-3\">\n                            <Form.Label>Full Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value={name}\n                                placeholder=\"Full Name\"\n                                onChange={(e) => setName(e.target.value)}\n                            >\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"email\" className=\"mb-3\">\n                            <Form.Label>E-Mail</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                value={email}\n                                placeholder=\"E-Mail\"\n                                onChange={(e) => setEmail(e.target.value)}\n                            >\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"password\" className=\"mb-3\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                value={password}\n                                placeholder=\"Password\"\n                                onChange={(e) => setPassword(e.target.value)}\n                            >\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"avatar\" className=\"mb-3\">\n                            <Form.Label>Avatar</Form.Label>\n                            <Form.Control\n                                type=\"file\"\n                                placeholder=\"Avatar\"\n                                name=\"image\"\n                                onChange={handleUpload}\n                            >\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                            <Button variant=\"primary\" type=\"submit\">\n                                {loading ? <Loader /> : `Register`}\n                            </Button>\n                        </Form.Group>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default RegisterScreen;\n","/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/reducers/UserReducers.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/reducers/BookingReducers.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/reducers/RoomReducers.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/Loader.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/Paginate.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/Message.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/SearchRooms.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/RoomCard.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/FormReview.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/actions/UserActions.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/actions/BookingActions.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/hooks/useAuthStatus.tsx",["219"],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/ListReviews.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/Rating.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/components/RoomFeatures.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/actions/RoomActions.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/constants/UserConstants.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/constants/RoomConstants.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/constants/BookingConstants.tsx",[],[],"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/axios.tsx",[],[],{"ruleId":"220","severity":1,"message":"221","line":67,"column":8,"nodeType":"222","endLine":67,"endColumn":43,"suggestions":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","severity":1,"message":"229","line":18,"column":22,"nodeType":"230","messageId":"231","endLine":18,"endColumn":35},{"ruleId":"228","severity":1,"message":"232","line":18,"column":67,"nodeType":"230","messageId":"231","endLine":18,"endColumn":79},{"ruleId":"220","severity":1,"message":"221","line":30,"column":8,"nodeType":"222","endLine":30,"endColumn":37,"suggestions":"233"},{"ruleId":"220","severity":1,"message":"234","line":42,"column":8,"nodeType":"222","endLine":42,"endColumn":43,"suggestions":"235"},{"ruleId":"228","severity":1,"message":"229","line":18,"column":20,"nodeType":"230","messageId":"231","endLine":18,"endColumn":33},{"ruleId":"228","severity":1,"message":"236","line":18,"column":66,"nodeType":"230","messageId":"231","endLine":18,"endColumn":77},{"ruleId":"228","severity":1,"message":"229","line":20,"column":20,"nodeType":"230","messageId":"231","endLine":20,"endColumn":33},{"ruleId":"228","severity":1,"message":"236","line":20,"column":66,"nodeType":"230","messageId":"231","endLine":20,"endColumn":77},{"ruleId":"220","severity":1,"message":"221","line":91,"column":8,"nodeType":"222","endLine":91,"endColumn":27,"suggestions":"237"},{"ruleId":"220","severity":1,"message":"221","line":39,"column":8,"nodeType":"222","endLine":39,"endColumn":27,"suggestions":"238"},{"ruleId":"228","severity":1,"message":"239","line":14,"column":9,"nodeType":"230","messageId":"231","endLine":14,"endColumn":17},{"ruleId":"228","severity":1,"message":"240","line":58,"column":22,"nodeType":"230","messageId":"231","endLine":58,"endColumn":42},{"ruleId":"220","severity":1,"message":"241","line":87,"column":8,"nodeType":"222","endLine":87,"endColumn":22,"suggestions":"242"},{"ruleId":"220","severity":1,"message":"221","line":65,"column":8,"nodeType":"222","endLine":65,"endColumn":37,"suggestions":"243"},{"ruleId":"228","severity":1,"message":"244","line":1,"column":8,"nodeType":"230","messageId":"231","endLine":1,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["245"],"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"@typescript-eslint/no-unused-vars","'loadingDelete' is assigned a value but never used.","Identifier","unusedVar","'errorSuccess' is assigned a value but never used.",["248"],"React Hook useEffect has missing dependencies: 'error' and 'navigate'. Either include them or remove the dependency array.",["249"],"'errorDelete' is assigned a value but never used.",["250"],["251"],"'navigate' is assigned a value but never used.","'loadingBookingCreate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'successBookingCreate'. Either include it or remove the dependency array.",["252"],["253"],"'React' is defined but never used.",{"desc":"254","fix":"255"},"no-global-assign","no-unsafe-negation",{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},"Update the dependencies array to be: [dispatch, room, successUpdate, id, navigate]",{"range":"268","text":"269"},"Update the dependencies array to be: [userInfo, success, dispatch, navigate]",{"range":"270","text":"271"},"Update the dependencies array to be: [dispatch, user, id, successUpdate, error, navigate]",{"range":"272","text":"273"},"Update the dependencies array to be: [dispatch, navigate, success]",{"range":"274","text":"275"},"Update the dependencies array to be: [success, dispatch, navigate]",{"range":"276","text":"277"},"Update the dependencies array to be: [dispatch, id, successBookingCreate]",{"range":"278","text":"279"},"Update the dependencies array to be: [dispatch, userInfo, success, navigate]",{"range":"280","text":"281"},[3001,3036],"[dispatch, room, successUpdate, id, navigate]",[1010,1039],"[userInfo, success, dispatch, navigate]",[1508,1543],"[dispatch, user, id, successUpdate, error, navigate]",[3358,3377],"[dispatch, navigate, success]",[1598,1617],"[success, dispatch, navigate]",[3436,3450],"[dispatch, id, successBookingCreate]",[1938,1967],"[dispatch, userInfo, success, navigate]"]