{"ast":null,"code":"var _jsxFileName = \"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/PasswordScreen.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\nimport { updatePassword } from '../redux/actions/UserActions';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PasswordScreen = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  let navigate = useNavigate();\n  const [oldPassword, setOldPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errConfirmPassword, setErrConfirmPassowrd] = useState(\"\");\n  const {\n    success,\n    loading,\n    error\n  } = useSelector(state => state.passwordUpdate);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (newPassword === confirmPassword) {\n      dispatch(updatePassword({\n        oldPassword,\n        newPassword\n      }));\n      setErrConfirmPassowrd(\"\");\n    } else {\n      setErrConfirmPassowrd(\"New Password must match confirm password\");\n    }\n  };\n\n  useEffect(() => {\n    if (success) {\n      navigate(\"/account/password\");\n      setOldPassword(\"\");\n      setNewPassword(\"\");\n      setConfirmPassword(\"\");\n    }\n  }, [success, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-4\",\n          children: \"Update Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), error && /*#__PURE__*/_jsxDEV(Message, {\n          variant: \"danger\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 27\n        }, this), errConfirmPassword && /*#__PURE__*/_jsxDEV(Message, {\n          variant: \"danger\",\n          children: errConfirmPassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 40\n        }, this), success && /*#__PURE__*/_jsxDEV(Message, {\n          variant: \"primary\",\n          children: \"Password Updated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"oldPassword\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Old Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              value: oldPassword,\n              placeholder: \"Old Password\",\n              onChange: e => setOldPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"newPassword\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"New Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              value: newPassword,\n              placeholder: \"New Password\",\n              onChange: e => setNewPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"confirmPassword\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Confirm Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              value: confirmPassword,\n              placeholder: \"Confirm Password\",\n              onChange: e => setConfirmPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              type: \"submit\",\n              children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 40\n              }, this) : `Update`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this);\n};\n\n_s(PasswordScreen, \"LeCSDekh6vKZgsP8qeJwCkvX8mI=\", false, function () {\n  return [useDispatch, useNavigate, useSelector];\n});\n\n_c = PasswordScreen;\nexport default PasswordScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordScreen\");","map":{"version":3,"sources":["/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/PasswordScreen.tsx"],"names":["React","useState","useEffect","useNavigate","useSelector","useDispatch","Container","Row","Col","Form","Button","updatePassword","Message","Loader","PasswordScreen","dispatch","navigate","oldPassword","setOldPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","errConfirmPassword","setErrConfirmPassowrd","success","loading","error","state","passwordUpdate","handleSubmit","e","preventDefault","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch, RootStateOrAny } from 'react-redux';\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\nimport { updatePassword } from '../redux/actions/UserActions';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { IUpdatePassword } from '../interfaces/IUser';\n\nconst PasswordScreen: React.FC = () => {\n\n    const dispatch = useDispatch();\n    let navigate = useNavigate();\n\n    const [oldPassword, setOldPassword] = useState<IUpdatePassword['oldPassword']>(\"\");\n    const [newPassword, setNewPassword] = useState<IUpdatePassword['newPassword']>(\"\");\n    const [confirmPassword, setConfirmPassword] = useState<IUpdatePassword['confirmPassword']>(\"\");\n    const [errConfirmPassword, setErrConfirmPassowrd] = useState<IUpdatePassword['errConfirmPassword']>(\"\");\n\n    const { success, loading, error } = useSelector((state: RootStateOrAny) => state.passwordUpdate);\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        if(newPassword === confirmPassword) {\n            dispatch(updatePassword({ oldPassword, newPassword }));\n            setErrConfirmPassowrd(\"\");\n        } else {\n            setErrConfirmPassowrd(\"New Password must match confirm password\")\n        }\n    }\n\n    useEffect(() => {\n        if(success) {\n            navigate(\"/account/password\");\n            setOldPassword(\"\");\n            setNewPassword(\"\");\n            setConfirmPassword(\"\");\n        }\n    }, [success, dispatch]);\n    \n\n  return (\n      <Container>\n        <Row className='justify-content-center'>\n            <Col xs={12} md={6}>\n                <h2 className=\"mb-4\">Update Password</h2>\n                {error && <Message variant=\"danger\">{error}</Message>}\n                {errConfirmPassword && <Message variant=\"danger\">{errConfirmPassword}</Message>}\n                {success && <Message variant=\"primary\">Password Updated</Message>}\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group controlId=\"oldPassword\" className=\"mb-3\">\n                        <Form.Label>Old Password</Form.Label>\n                        <Form.Control \n                            type=\"password\" \n                            value={oldPassword} \n                            placeholder=\"Old Password\" \n                            onChange={(e) => setOldPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"newPassword\" className=\"mb-3\">\n                        <Form.Label>New Password</Form.Label>\n                        <Form.Control \n                            type=\"password\" \n                            value={newPassword} \n                            placeholder=\"New Password\" \n                            onChange={(e) => setNewPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"confirmPassword\" className=\"mb-3\">\n                        <Form.Label>Confirm Password</Form.Label>\n                        <Form.Control \n                            type=\"password\" \n                            value={confirmPassword} \n                            placeholder=\"Confirm Password\" \n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Button variant=\"primary\" type=\"submit\">\n                            {loading ? <Loader /> : `Update`}\n                        </Button>\n                    </Form.Group>\n                </Form>\n            </Col>\n        </Row>\n    </Container>\n  );\n};\n\nexport default PasswordScreen;\n"]},"metadata":{},"sourceType":"module"}