{"ast":null,"code":"import { instance as axios } from '../../axios';\nimport * as actions from '../constants/RoomConstants';\nexport const fetchRooms = (keyword, numOfBeds, roomType, currentPage) => async dispatch => {\n  try {\n    dispatch({\n      type: actions.FETCH_ROOMS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/rooms/?keyword=${keyword}&numOfBeds=${numOfBeds}&roomType=${roomType}&pageNumber=${currentPage}`);\n    dispatch({\n      type: actions.FETCH_ROOMS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: actions.FETCH_ROOMS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getRoomDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: actions.ROOM_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/rooms/${id}`);\n    dispatch({\n      type: actions.ROOM_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: actions.ROOM_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createRoomReview = (id, review) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actions.ROOM_CREATE_REVIEW_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/JSON\",\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.post(`/api/rooms/${id}/reviews`, review, config);\n    dispatch({\n      type: actions.ROOM_CREATE_REVIEW_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: actions.ROOM_CREATE_REVIEW_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createRoom = roomData => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actions.CREATE_ROOM_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/JSON\",\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.post(`/api/rooms`, roomData, config);\n    dispatch({\n      type: actions.CREATE_ROOM_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: actions.CREATE_ROOM_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateRoom = (roomId, roomData) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actions.UPDATE_ROOM_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/JSON',\n        'Authorization': `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.put(`/api/rooms/${roomId}`, roomData, config);\n    dispatch({\n      type: actions.UPDATE_ROOM_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: actions.UPDATE_ROOM_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteRoom = roomId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actions.DELETE_ROOM_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/rooms/${roomId}`, config);\n    dispatch({\n      type: actions.DELETE_ROOM_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: actions.DELETE_ROOM_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/redux/actions/RoomActions.tsx"],"names":["instance","axios","actions","fetchRooms","keyword","numOfBeds","roomType","currentPage","dispatch","type","FETCH_ROOMS_REQUEST","data","get","FETCH_ROOMS_SUCCESS","payload","error","FETCH_ROOMS_FAIL","response","message","getRoomDetails","id","ROOM_DETAILS_REQUEST","ROOM_DETAILS_SUCCESS","ROOM_DETAILS_FAIL","createRoomReview","review","getState","ROOM_CREATE_REVIEW_REQUEST","userLogin","userInfo","config","headers","token","post","ROOM_CREATE_REVIEW_SUCCESS","ROOM_CREATE_REVIEW_FAIL","createRoom","roomData","CREATE_ROOM_REQUEST","CREATE_ROOM_SUCCESS","CREATE_ROOM_FAIL","updateRoom","roomId","UPDATE_ROOM_REQUEST","put","UPDATE_ROOM_SUCCESS","UPDATE_ROOM_FAIL","deleteRoom","DELETE_ROOM_REQUEST","delete","DELETE_ROOM_SUCCESS","DELETE_ROOM_FAIL"],"mappings":"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","sourcesContent":["import { instance as axios } from '../../axios';\nimport { Dispatch } from 'redux';\nimport * as actions from '../constants/RoomConstants';\nimport { IRoom, ICreateReview, TCreateRoom } from '../../interfaces/IRoom';\n\nexport const fetchRooms = (keyword: string, numOfBeds: number | string, roomType: string, currentPage: number) =>\n    async (dispatch: Dispatch) => {\n        try {\n            dispatch({ type: actions.FETCH_ROOMS_REQUEST });\n\n            const { data } =\n                await axios.get(`/api/rooms/?keyword=${keyword}&numOfBeds=${numOfBeds}&roomType=${roomType}&pageNumber=${currentPage}`);\n\n            dispatch({ type: actions.FETCH_ROOMS_SUCCESS, payload: data });\n\n        } catch (error: any) {\n            dispatch({\n                type: actions.FETCH_ROOMS_FAIL,\n                payload: error.response && error.response.data.message ?\n                    error.response.data.message : error.message\n            });\n        }\n    }\n\nexport const getRoomDetails = (id: IRoom['_id']) => async (dispatch: Dispatch) => {\n\n    try {\n        dispatch({ type: actions.ROOM_DETAILS_REQUEST });\n\n        const { data } = await axios.get(`/api/rooms/${id}`);\n        dispatch({ type: actions.ROOM_DETAILS_SUCCESS, payload: data });\n\n    } catch (error: any) {\n        dispatch({\n            type: actions.ROOM_DETAILS_FAIL,\n            payload: error.response && error.response.data.message ?\n                error.response.data.message : error.message\n        });\n    }\n\n}\n\nexport const createRoomReview = (id: IRoom['_id'], review: ICreateReview) => async (dispatch: Dispatch, getState: any) => {\n\n    try {\n        dispatch({ type: actions.ROOM_CREATE_REVIEW_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/JSON\",\n                \"Authorization\": `Bearer ${userInfo.token}`\n            }\n        }\n\n        await axios.post(`/api/rooms/${id}/reviews`, review, config);\n        dispatch({ type: actions.ROOM_CREATE_REVIEW_SUCCESS });\n\n    } catch (error: any) {\n        dispatch({\n            type: actions.ROOM_CREATE_REVIEW_FAIL,\n            payload: error.response && error.response.data.message ?\n                error.response.data.message : error.message\n        });\n    }\n\n}\n\nexport const createRoom = (roomData: TCreateRoom) => async (dispatch: Dispatch, getState: any) => {\n\n    try {\n        dispatch({ type: actions.CREATE_ROOM_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/JSON\",\n                \"Authorization\": `Bearer ${userInfo.token}`\n            }\n        }\n\n        await axios.post(`/api/rooms`, roomData, config);\n        dispatch({ type: actions.CREATE_ROOM_SUCCESS });\n\n    } catch (error: any) {\n        dispatch({\n            type: actions.CREATE_ROOM_FAIL,\n            payload: error.response && error.response.data.message ?\n                error.response.data.message : error.message\n        });\n    }\n\n}\n\nexport const updateRoom = (roomId: IRoom['_id'], roomData: TCreateRoom) => async (dispatch: Dispatch, getState: any) => {\n\n    try {\n\n        dispatch({ type: actions.UPDATE_ROOM_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/JSON',\n                'Authorization': `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/rooms/${roomId}`, roomData, config);\n        dispatch({ type: actions.UPDATE_ROOM_SUCCESS });\n\n    } catch (error: any) {\n        dispatch({\n            type: actions.UPDATE_ROOM_FAIL,\n            payload: error.response && error.response.data.message ?\n                error.response.data.message : error.message\n        });\n    }\n\n}\n\nexport const deleteRoom = (roomId: IRoom['_id']) => async (dispatch: Dispatch, getState: any) => {\n\n    try {\n        dispatch({ type: actions.DELETE_ROOM_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                \"Authorization\": `Bearer ${userInfo.token}`\n            }\n        }\n\n        await axios.delete(`/api/rooms/${roomId}`, config);\n        dispatch({ type: actions.DELETE_ROOM_SUCCESS });\n\n    } catch (error: any) {\n        dispatch({\n            type: actions.DELETE_ROOM_FAIL,\n            payload: error.response && error.response.data.message ?\n                error.response.data.message : error.message\n        });\n    }\n\n}"]},"metadata":{},"sourceType":"module"}