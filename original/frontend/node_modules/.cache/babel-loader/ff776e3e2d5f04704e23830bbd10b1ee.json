{"ast":null,"code":"var _jsxFileName = \"/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminEditUserScreen.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { detailsUser, updateUser } from '../redux/actions/UserActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { UPDATE_USER_RESET } from '../redux/constants/UserConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AdminEditUserScreen = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  let navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isAdmin, setIsAdmin] = useState(false);\n  const {\n    user,\n    loading,\n    error\n  } = useSelector(state => state.userDetails);\n  const {\n    loading: loadingUpdate,\n    success: successUpdate,\n    error: errorUpdate\n  } = useSelector(state => state.userUpdate);\n  useEffect(() => {\n    if (!user || user._id !== id || successUpdate) {\n      dispatch({\n        type: UPDATE_USER_RESET\n      });\n      dispatch(detailsUser(id));\n    } else {\n      setName(user.name);\n      setEmail(user.email);\n      setIsAdmin(user.isAdmin);\n    }\n\n    if (error) {\n      navigate(\"/\");\n    }\n  }, [dispatch, user, id, successUpdate]);\n\n  const handlerSubmit = e => {\n    e.preventDefault();\n    dispatch(updateUser(user._id, {\n      name,\n      email,\n      isAdmin\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 12,\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"mb-3\",\n          children: \"Update User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        children: [loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }, this), !loading && user && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n            variant: \"danger\",\n            children: errorUpdate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: handlerSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"name\",\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Full Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                value: name,\n                placeholder: \"Full Name\",\n                onChange: e => setName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"email\",\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"E-Mail\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"email\",\n                value: email,\n                placeholder: \"E-Mail\",\n                onChange: e => setEmail(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"isAdmin\",\n              children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"checkbox\",\n                label: \"Is Admin\",\n                checked: isAdmin ? true : false,\n                onChange: e => setIsAdmin(!isAdmin)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"mt-3\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                children: loadingUpdate ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 54\n                }, this) : `Update`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AdminEditUserScreen, \"weukGI2s15o7vWp+ifG70w6JtSo=\", false, function () {\n  return [useDispatch, useNavigate, useParams, useSelector, useSelector];\n});\n\n_c = AdminEditUserScreen;\nexport default AdminEditUserScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminEditUserScreen\");","map":{"version":3,"sources":["/Users/brianheise/liferay/training/remote/hotel-booking/frontend/src/screens/AdminEditUserScreen.tsx"],"names":["React","useState","useEffect","useDispatch","useSelector","Container","Col","Row","Form","Button","useParams","useNavigate","detailsUser","updateUser","Loader","Message","UPDATE_USER_RESET","AdminEditUserScreen","dispatch","navigate","id","name","setName","email","setEmail","isAdmin","setIsAdmin","user","loading","error","state","userDetails","loadingUpdate","success","successUpdate","errorUpdate","userUpdate","_id","type","handlerSubmit","e","preventDefault","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap'\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { IUser } from '../interfaces/IUser';\nimport { detailsUser, updateUser } from '../redux/actions/UserActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { UPDATE_USER_RESET } from '../redux/constants/UserConstants';\n\ntype TId = {\n    id: IUser['_id']\n}\n\nconst AdminEditUserScreen = () => {\n\n    const dispatch = useDispatch();\n    let navigate = useNavigate();\n\n    const { id } = useParams<TId>();\n    const [name, setName] = useState<IUser['name']>(\"\");\n    const [email, setEmail] = useState<IUser['email']>(\"\");\n    const [isAdmin, setIsAdmin] = useState<IUser['isAdmin']>(false);\n\n    const { user, loading, error } = useSelector((state: RootStateOrAny) => state.userDetails);\n\n    const { loading: loadingUpdate, success: successUpdate, error: errorUpdate } = useSelector((state: RootStateOrAny) => state.userUpdate);\n\n    useEffect(() => {\n        if(!user || user._id !== id || successUpdate) {\n            dispatch({ type: UPDATE_USER_RESET });\n            dispatch(detailsUser(id as string));\n        } else {\n            setName(user.name);\n            setEmail(user.email);\n            setIsAdmin(user.isAdmin);\n        }\n\n        if(error) {\n            navigate(\"/\");\n        }\n    }, [dispatch, user, id, successUpdate])\n    \n    const handlerSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        dispatch(updateUser(user._id as string, { name, email, isAdmin }));\n    }\n\n  return (\n    <Container>\n        <Row>\n            <Col md={12}>\n                <h3 className='mb-3'>Update User</h3>\n            </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n            <Col xs={12} md={6}>\n                {loading && <Loader />}\n                {!loading && user && (\n                    <>\n                        {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n                        <Form onSubmit={handlerSubmit}>\n                            <Form.Group controlId=\"name\" className=\"mb-3\">\n                                <Form.Label>Full Name</Form.Label>\n                                <Form.Control \n                                    type=\"text\" \n                                    value={name} \n                                    placeholder=\"Full Name\" \n                                    onChange={(e) => setName(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group controlId=\"email\" className=\"mb-3\">\n                                <Form.Label>E-Mail</Form.Label>\n                                <Form.Control \n                                    type=\"email\" \n                                    value={email} \n                                    placeholder=\"E-Mail\" \n                                    onChange={(e) => setEmail(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group controlId=\"isAdmin\">\n                                <Form.Check \n                                    type=\"checkbox\" \n                                    label=\"Is Admin\" \n                                    checked={isAdmin ? true : false}\n                                    onChange={(e) => setIsAdmin(!isAdmin)}\n                                />\n                            </Form.Group>\n                            <Form.Group className=\"mt-3\">\n                                <Button type=\"submit\">\n                                    {loadingUpdate ? <Loader /> : `Update`}\n                                </Button>\n                            </Form.Group>\n                        </Form>\n                    </>\n                )}\n            </Col>\n        </Row>\n    </Container>\n  )\n}\n\nexport default AdminEditUserScreen"]},"metadata":{},"sourceType":"module"}